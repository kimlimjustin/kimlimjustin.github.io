function detectBrowser() {
    return -1 != navigator.userAgent.indexOf('Chrome') ? 'Chrome' : -1 != navigator.userAgent.indexOf('Firefox') ? 'Firefox' : 'Other';
}
(String.prototype.lowerize = function () {
    return this.charAt(0).toLowerCase() + this.slice(1);
}),
    document.addEventListener('DOMContentLoaded', () => {
        if (localStorage.getItem('theme')) document.body.dataset.theme = localStorage.getItem('theme');
        else {
            let themePreference = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
            localStorage.setItem('theme', themePreference), (document.body.dataset.theme = themePreference);
        }
        document.documentElement.clientWidth <= 480
            ? (document.querySelector('.topnav-name').innerText = '<Justin M.K. />')
            : (document.querySelector('.topnav-name').innerText = '<Justin Maximillian Kimlim />'),
            window.addEventListener('resize', () => {
                document.documentElement.clientWidth <= 480
                    ? (document.querySelector('.topnav-name').innerText = '<Justin M.K. />')
                    : (document.querySelector('.topnav-name').innerText = '<Justin Maximillian Kimlim />');
            }),
            document.querySelector('.topnav-ham').addEventListener('click', () => {
                (document.querySelector('.topnav-menu').style.width = '100vw'),
                    document.querySelector('.topnav-exit-menu').addEventListener('click', () => {
                        document.querySelector('.topnav-menu').style.width = '0vw';
                    }),
                    document.querySelectorAll('a').forEach((link) => {
                        link.addEventListener('click', () => {
                            document.querySelector('.topnav-menu').style.width = '0vw';
                        });
                    }),
                    window.addEventListener('resize', () => {
                        document.querySelector('.topnav-menu').style.width = '0vw';
                    });
            }),
            AOS.init(),
            fetch('https://api.github.com/repos/kimlimjustin/kimlimjustin.com')
                .then((response) => response.json())
                .then((result) => {
                    (document.querySelector('#github-stars').innerText = result.stargazers_count),
                        (document.querySelector('#github-forks').innerText = result.forks);
                })
                .catch(() => document.querySelector('.github-stats').removeChild(document.querySelector('.github-stats'))),
            document.querySelector('.switch-theme-btn').addEventListener('click', () => {
                let newTheme = 'dark' === document.body.dataset.theme ? 'light' : 'dark';
                (document.body.dataset.theme = newTheme), localStorage.setItem('theme', newTheme);
            });
        let PROJECTS = [];
        fetch('https://gh-pinned-repos-5l2i19um3.vercel.app/?username=kimlimjustin')
            .then((response) => response.json())
            .then((result) => (PROJECTS = result));
        let ARTICLES = [];
        fetch('https://dev.to/api/articles?username=kimlimjustin')
            .then((response) => response.json())
            .then((result) => {
                let recentArticles;
                (ARTICLES = result),
                    result.slice(0, 4).forEach((article) => {
                        let articleElement = document.createElement('div');
                        articleElement.classList.add('article-box'),
                            console.log(article),
                            (articleElement.innerHTML = `\n\t\t\t\t<a href="${article.url}" class="article-preview" target="_blank" rel="noopener">\n\t\t\t\t\t<img src="${article.social_image}" alt="1${article.title}">\n\t\t\t\t</a>\n\t\t\t\t<div class="article-content">\n                    <div class="article-content-inner">\n                        <h4 class="article-content-title">${article.title}</h4>\n                        <p class="article-content-description">${article.description}</p>\n                    </div>\n\t\t\t\t\t<a href="${article.url}" class="article-link" target="_blank"\n\t\t\t\t\t\trel="noopener">\n\t\t\t\t\t\t<svg focusable="false" data-prefix="fab" data-icon="dev" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" data-fa-i2svg="" class="article-svg">\n                            <path fill="currentColor" d="M120.12 208.29c-3.88-2.9-7.77-4.35-11.65-4.35H91.03v104.47h17.45c3.88 0 7.77-1.45 11.65-4.35 3.88-2.9 5.82-7.25 5.82-13.06v-69.65c-.01-5.8-1.96-10.16-5.83-13.06zM404.1 32H43.9C19.7 32 .06 51.59 0 75.8v360.4C.06 460.41 19.7 480 43.9 480h360.2c24.21 0 43.84-19.59 43.9-43.8V75.8c-.06-24.21-19.7-43.8-43.9-43.8zM154.2 291.19c0 18.81-11.61 47.31-48.36 47.25h-46.4V172.98h47.38c35.44 0 47.36 28.46 47.37 47.28l.01 70.93zm100.68-88.66H201.6v38.42h32.57v29.57H201.6v38.41h53.29v29.57h-62.18c-11.16.29-20.44-8.53-20.72-19.69V193.7c-.27-11.15 8.56-20.41 19.71-20.69h63.19l-.01 29.52zm103.64 115.29c-13.2 30.75-36.85 24.63-47.44 0l-38.53-144.8h32.57l29.71 113.72 29.57-113.72h32.58l-38.46 144.8z">\n                            </path>\n                        </svg>\n                    </svg>\n\t\t\t\t\t</a>\n\t\t\t\t</div>`),
                            articleElement.addEventListener('click', () => {
                                let blog;
                                window.open(article.url, '_blank').focus();
                            }),
                            document.querySelector('#articles').appendChild(articleElement);
                    });
                let readMoreElement = document.createElement('a');
                readMoreElement.classList.add('article-read-more'),
                    (readMoreElement.innerText = 'Read more on dev.to'),
                    (readMoreElement.href = 'https://dev.to/kimlimjustin'),
                    readMoreElement.setAttribute('target', '_blank'),
                    readMoreElement.setAttribute('rel', 'noopener'),
                    document.querySelector('#articles').appendChild(readMoreElement);
            })
            .catch(() => document.querySelector('#articles').parentNode.removeChild(document.querySelector('#articles')));
        const readJSONFile = (file, callback) => {
            var rawFile = new XMLHttpRequest();
            rawFile.overrideMimeType('application/json'),
                rawFile.open('GET', file, !0),
                (rawFile.onreadystatechange = function () {
                    4 === rawFile.readyState && '200' == rawFile.status && callback(rawFile.responseText);
                }),
                rawFile.send(null);
        };
        let multilingual,
            currentLang = 'en-US';
        const changeSelectedLang = (langCode) => {
                document.querySelector('.lang-select').childNodes.forEach((child) => {
                    child.value === langCode ? (child.selected = !0) : (child.selected = !1);
                });
            },
            switchLang = (langCode) => {
                Object.keys(multilingual.resources).forEach((en) => {
                    findAndReplaceDOMText(document.body, {
                        find: multilingual.resources[en][currentLang] || en,
                        replace: multilingual.resources[en][langCode],
                    });
                }),
                    (currentLang = langCode),
                    document.querySelector('html').setAttribute('lang', langCode);
            };
        readJSONFile('multilingual.json', (text) => {
            (multilingual = JSON.parse(text)),
                Object.keys(multilingual.langCode).forEach((lang) => {
                    let option = document.createElement('option');
                    (option.innerText = lang),
                        (option.value = multilingual.langCode[lang]),
                        document.querySelector('.lang-select').appendChild(option);
                }),
                changeSelectedLang('en-US'),
                document.querySelector('.lang-select').addEventListener('change', (e) => {
                    switchLang(e.target.value);
                });
        }),
            document.querySelector('.terminal-version-btn').addEventListener('click', () => {
                const modal = document.querySelector('.modal'),
                    terminalElement = document.querySelector('.terminal');
                modal.style.display = 'block';
                const inputTerminal = document.querySelector('.terminal-input-command');
                inputTerminal.focus();
                const REMOVE_LOG = () => {
                        const outputLog = terminalElement.querySelectorAll('.terminal-row');
                        outputLog.forEach((log) => {
                            log.contains(inputTerminal) || terminalElement.removeChild(log);
                        });
                    },
                    EXIT = () => {
                        REMOVE_LOG(),
                            inputTerminal.removeEventListener('change', inputTerminalHandler),
                            (modal.style.display = 'none'),
                            document.querySelector('.terminal').style.removeProperty('height'),
                            document.querySelector('.terminal').style.removeProperty('margin'),
                            document.querySelector('.terminal').style.removeProperty('padding'),
                            document.querySelector('.terminal').style.removeProperty('width');
                    };
                modal.querySelector('.modal-close-btn').addEventListener('click', () => {
                    EXIT();
                }),
                    modal.querySelector('.modal-maximize-btn').addEventListener('click', () => {
                        switch (
                            ((document.querySelector('.terminal').style.height = 'calc(100% - 4.1rem)'),
                            (document.querySelector('.terminal').style.margin = '0'),
                            (document.querySelector('.terminal').style.padding = '2rem'),
                            detectBrowser())
                        ) {
                            case 'Chrome':
                                document.querySelector('.terminal').style.width = '-webkit-fill-available';
                                break;
                            case 'Firefox':
                                document.querySelector('.terminal').style.width = '-moz-available';
                                break;
                            default:
                                document.querySelector('.terminal').style.width = 'fill-available';
                        }
                    });
                const RETURN_VALUE = (inputValue, outputValue) => {
                    let outputElement = document.createElement('p');
                    outputElement.classList.add('terminal-row'), outputElement.classList.add('terminal-log'), (outputElement.innerHTML = outputValue);
                    let lastInputElement = document.createElement('p');
                    lastInputElement.classList.add('terminal-row'),
                        (lastInputElement.innerHTML = `<span class="terminal-user">ask@justin:~$</span><span class="terminal-log">${inputValue}</span>`),
                        terminalElement.insertBefore(outputElement, inputTerminal.parentNode),
                        terminalElement.insertBefore(lastInputElement, outputElement);
                };
                let PREVIOUS_COMMANDS = [];
                const inputTerminalHandler = (e) => {
                    if ('Enter' === e.key && e.target.value) {
                        let input = e.target.value.lowerize(),
                            output = `'${input.split(' ')[0]}' is not recognized as a command.`;
                        switch ((PREVIOUS_COMMANDS.push(input), input.split(' ')[0])) {
                            case 'help':
                                output =
                                    '<span>Some available commands are:</span><ul>\n                        <li>about ......... About me</li>\n                        <li>clear ......... Clear terminal log</li>\n                        <li>exit .......... Exit terminal session</li>\n                        <li>help .......... Showing available commands</li>\n                        <li>links ......... Social media links</li>\n                        <li>theme ......... Change theme of terminal</li>\n                        <li>articles ...... Recent articles</li>\n                        <li>projects ...... My pinned projects on GitHub</li>\n                        <li>lang .......... Change language of this website</li>\n                        </ul><span>Besides, there are some hidden feature, try to find it out!</span>';
                                break;
                            case 'about':
                                output =
                                    "Hello, I'm Justin Maximillian Kimlim from Indonesia, a 15 y.o. high school student with hobbies of computer science, programming and science fiction. I enjoy making projects or even website clone.";
                                break;
                            case 'links':
                                output =
                                    '<ul>\n                        <li><a href="https://instagram.com/justin_kimlim_" target="_blank" rel="noopener">Instagram</a></li>\n                        <li><a href="https://github.com/kimlimjustin" target="_blank" rel="noopener">GitHub</a></li>\n                        <li><a href="https://dev.to/kimlimjustin" target="_blank" rel="noopener">Dev.to</a></li>\n                        <li><a href="https://reddit.com/kimlimjustin" target="_blank" rel="noopener">Reddit</a></li>\n                        <li><a href="mailto:kimlimjustin@gmail.com" target="_blank" rel="noopener">Email</a></li>\n                        </ul>';
                                break;
                            case 'theme':
                                const availableThemes = ['light', 'dark', 'sky', 'tokyo night', 'atom'];
                                if ('theme' === input.trim())
                                    output = `<span>Usage: theme [option]. Available themes:</span><ul>${availableThemes
                                        .map((theme) => `<li>${theme}</li>`)
                                        .join('')}</ul>`;
                                else {
                                    let inputTheme = input.split(' ').slice(1).join(' ').trim();
                                    -1 === availableThemes.indexOf(inputTheme)
                                        ? (output = `${inputTheme} is not recognized as a theme`)
                                        : ((output = ''), (terminalElement.dataset.theme = inputTheme));
                                }
                                break;
                            case 'articles':
                                output = `<ul>${ARTICLES.map(
                                    (article) => `<li><a href = "${article.url}" target="_blank" rel="noopener">${article.title}</a></li>`
                                ).join('')}</ul>`;
                                break;
                            case 'github':
                                let github;
                                window.open('https://github.com/kimlimjustin', '_blank').focus(), (output = '');
                                break;
                            case 'https://kimlimjustin.com':
                            case 'kimlimjustin.com':
                            case 'http://kimlimjustin.com':
                                output =
                                    'This website is designed and built by Justin Maximillian Kimlim using HTML, CSS and Vanilla JavaScript and was inspired by several websites over the internet. Find out the repo of this website <a href = "https://github.com/kimlimjustin/kimlimjustin.com" target="_blank" rel="noopener">here.</a>';
                                break;
                            case 'hello':
                            case 'hi':
                                window.open('mailto:kimlimjustin@gmail.com?Subject=Hello'),
                                    (output = 'Say hello to me <a href="mailto:kimlimjustin@gmail.com?Subject=Hello">here!</a>');
                                break;
                            case 'refresh':
                                location.reload(), (output = '');
                                break;
                            case 'whoami':
                                output = 'You are human when you type this command :)';
                                break;
                            case 'pwd':
                                output = 'https://kimlimjustin.com';
                                break;
                            case 'sudo':
                                output = 'Are you thinking you are on linux man?';
                                break;
                            case 'cd':
                                output = 'Where do you want to go? This is just a website that simulates terminal haha.';
                                break;
                            case 'ls':
                                output = 'Nothing here xd.';
                                break;
                            case 'ping':
                                output = 'Where do you want to ping to? Haha';
                                break;
                            case 'echo':
                                output = input.split(' ').slice(1).join(' ');
                                break;
                            case 'kill':
                                (output = "Please don't kill me 😆😆"), breakl;
                            case 'man':
                                output = 'What?';
                                break;
                            case 'shutdown':
                                output = 'Wait? what???';
                                break;
                            case 'whoareu':
                            case 'whoareyou':
                                output = 'I\'m human :) Contact me <a href = "kimlimjustin@gmail.com">here</a>';
                                break;
                            case 'clear':
                                'clear cache' === input && (localStorage.clear(), (output = 'Localstorage has been cleared :)'));
                                break;
                            case 'date':
                                output = new Date();
                                break;
                            case 'projects':
                                output = `<span>My pinned repositories:</span>\n                        <ul>${PROJECTS.map(
                                    (repo) =>
                                        `<li><a href="${repo.link}" target="_blank" rel="noopener">${repo.owner}/${repo.repo}</a> (${repo.description})</li>`
                                ).join('')}</ul>`;
                                break;
                            case 'fork':
                            case 'star':
                                let repo;
                                window.open('https://github.com/kimlimjustin/kimlimjustin.com', '_blank').focus(), (output = '');
                                break;
                            case 'lang':
                            case 'language':
                                if ('lang' === input.trim() || 'language' === input.trim())
                                    output = `<span>Usage: lang [language code]. Available languages:<ul>${multilingual.availableLanguages
                                        .map((lang) => `<li>${lang}</li>`)
                                        .join('')}</span>`;
                                else {
                                    let langCode = input.split(' ').slice(1).join(' ');
                                    -1 === multilingual.availableLanguagesCode.indexOf(langCode)
                                        ? (output = `${langCode} is not recognized as language code.`)
                                        : (switchLang(langCode), (output = '')),
                                        changeSelectedLang(langCode);
                                }
                        }
                        RETURN_VALUE(input, output),
                            ('clear' !== input && 'cls' !== input) || REMOVE_LOG(),
                            'exit' === input && EXIT(),
                            (inputTerminal.value = ''),
                            (terminalElement.scrollTop = terminalElement.scrollHeight);
                    }
                };
                inputTerminal.addEventListener('keypress', inputTerminalHandler);
                let i = PREVIOUS_COMMANDS.length;
                document.addEventListener('keydown', (e) => {
                    38 === e.keyCode
                        ? (e.preventDefault(),
                          i > 0 ? (i -= 1) : (i = PREVIOUS_COMMANDS.length - 1),
                          PREVIOUS_COMMANDS[i] && (inputTerminal.value = PREVIOUS_COMMANDS[i]),
                          inputTerminal.focus())
                        : 40 === e.keyCode &&
                          (e.preventDefault(),
                          i < PREVIOUS_COMMANDS.length - 1 ? (i += 1) : (i = 0),
                          PREVIOUS_COMMANDS[i] && (inputTerminal.value = PREVIOUS_COMMANDS[i]),
                          inputTerminal.focus());
                }),
                    terminalElement.addEventListener('click', () => inputTerminal.focus()),
                    document.body.addEventListener('click', (e) => {
                        e.target === modal && EXIT();
                    });
            });
    });
